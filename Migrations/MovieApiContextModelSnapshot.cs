// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MovieApi.Data;

#nullable disable

namespace MovieApi.Migrations
{
    [DbContext(typeof(MovieApiContext))]
    partial class MovieApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.Property<int>("ActorsId")
                        .HasColumnType("int");

                    b.Property<int>("MoviesId")
                        .HasColumnType("int");

                    b.HasKey("ActorsId", "MoviesId");

                    b.HasIndex("MoviesId");

                    b.ToTable("ActorMovie");

                    b.HasData(
                        new
                        {
                            ActorsId = 1,
                            MoviesId = 4
                        },
                        new
                        {
                            ActorsId = 2,
                            MoviesId = 1
                        },
                        new
                        {
                            ActorsId = 3,
                            MoviesId = 3
                        },
                        new
                        {
                            ActorsId = 4,
                            MoviesId = 2
                        },
                        new
                        {
                            ActorsId = 5,
                            MoviesId = 3
                        });
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BirthYear")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Actor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BirthYear = 1971,
                            Name = "Brad Pitt"
                        },
                        new
                        {
                            Id = 2,
                            BirthYear = 1949,
                            Name = "Meryl Streep"
                        },
                        new
                        {
                            Id = 3,
                            BirthYear = 1974,
                            Name = "Leonardo DiCaprio"
                        },
                        new
                        {
                            Id = 4,
                            BirthYear = 1988,
                            Name = "Emma Stone"
                        },
                        new
                        {
                            Id = 5,
                            BirthYear = 1956,
                            Name = "Tom Hanks"
                        });
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genre");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Children"
                        });
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Duration")
                        .HasColumnType("float");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenreId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Duration = 2.2000000000000002,
                            GenreId = 1,
                            Title = "Amelie från Montemartre",
                            Year = 2001
                        },
                        new
                        {
                            Id = 2,
                            Duration = 1.2,
                            GenreId = 3,
                            Title = "Aladdin",
                            Year = 1992
                        },
                        new
                        {
                            Id = 3,
                            Duration = 1.5,
                            GenreId = 2,
                            Title = "Jurassic Park",
                            Year = 1993
                        },
                        new
                        {
                            Id = 4,
                            Duration = 2.3999999999999999,
                            GenreId = 2,
                            Title = "Deadpool and Wolverine",
                            Year = 2024
                        });
                });

            modelBuilder.Entity("MovieApi.Models.Entities.MovieDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Budget")
                        .HasColumnType("float");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Synopsis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId")
                        .IsUnique();

                    b.ToTable("MovieDetails");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Budget = 10000000.0,
                            Language = "Franska",
                            MovieId = 1,
                            Synopsis = "En charmig och poetisk film om Amelie i Montmartre."
                        },
                        new
                        {
                            Id = 2,
                            Budget = 15000000.0,
                            Language = "Engelska",
                            MovieId = 2,
                            Synopsis = "Ett klassiskt äventyr med en magisk lampa och en ande."
                        },
                        new
                        {
                            Id = 3,
                            Budget = 60000000.0,
                            Language = "Engelska",
                            MovieId = 3,
                            Synopsis = "En spännande thriller med levande dinosaurier i en nöjespark."
                        },
                        new
                        {
                            Id = 4,
                            Budget = 80000000.0,
                            Language = "Engelska",
                            MovieId = 4,
                            Synopsis = "Humoristisk superhjältefilm med Deadpool och Wolverine."
                        });
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("ReviewerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.ToTable("Review");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            MovieId = 1,
                            Rating = 5,
                            ReviewerName = "Anna"
                        },
                        new
                        {
                            Id = 2,
                            MovieId = 2,
                            Rating = 4,
                            ReviewerName = "Johan"
                        },
                        new
                        {
                            Id = 3,
                            MovieId = 3,
                            Rating = 3,
                            ReviewerName = "Lisa"
                        },
                        new
                        {
                            Id = 4,
                            MovieId = 4,
                            Rating = 4,
                            ReviewerName = "Erik"
                        },
                        new
                        {
                            Id = 5,
                            MovieId = 1,
                            Rating = 5,
                            ReviewerName = "Sofia"
                        });
                });

            modelBuilder.Entity("ActorMovie", b =>
                {
                    b.HasOne("MovieApi.Models.Entities.Actor", null)
                        .WithMany()
                        .HasForeignKey("ActorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MovieApi.Models.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("MoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Movie", b =>
                {
                    b.HasOne("MovieApi.Models.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("MovieApi.Models.Entities.MovieDetails", b =>
                {
                    b.HasOne("MovieApi.Models.Entities.Movie", "Movie")
                        .WithOne("MovieDetails")
                        .HasForeignKey("MovieApi.Models.Entities.MovieDetails", "MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Review", b =>
                {
                    b.HasOne("MovieApi.Models.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");
                });

            modelBuilder.Entity("MovieApi.Models.Entities.Movie", b =>
                {
                    b.Navigation("MovieDetails")
                        .IsRequired();

                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
